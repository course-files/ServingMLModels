# Use a slim Python base image
FROM python:3.13.7-slim

# Set a working directory inside the container
WORKDIR /app

# Copy requirements first (better caching)
COPY requirements.txt .

# Install system dependencies as needed

# Some Python libraries contain C extensions that must be compiled at install time.
# For example: psycopg2, numpy, pandas, scipy, cryptography, etc.
# If you use the source distributions of those packages (sdist), 
# then pip tries to compile them → which requires gcc hence the 'build-essential package'.

# If your app uses only pure Python packages (Flask, Gunicorn, Requests,
# SQLAlchemy, etc.), then you can remove 'build-essential gcc' entirely.

# In this case, we:
## Install compilers temporarily during build.
## Then remove them later to reduce image size.
## We also clean up apt cache to reduce image size.

# RUN apt-get update && apt-get install -y --no-install-recommends build-essential gcc \
#     && pip install --no-cache-dir -r requirements.txt \
#     && apt-get purge -y --auto-remove build-essential gcc \
#     && rm -rf /var/lib/apt/lists/

RUN apt-get update \
    && pip install --no-cache-dir -r requirements.txt \
    && rm -rf /var/lib/apt/lists/

# Copy the application code
# COPY . .
COPY api.py .
COPY requirements.txt .
COPY model/ ./model/
COPY rules/ ./rules/

# This command runs a Flask app named “app”. App is defined in the file called api.py
# It starts 4 workers which will be able to process 4 simultaneous requests
# Rule of thumb: Set workers ≈ 2 × CPU cores in a production setting.

CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:8000", "api:app"]
